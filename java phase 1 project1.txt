==============================================================================
 1.write a program in java to perform implicit and explicit type casting 

package javaprogram;

public class ImplicitTypeCasting {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int myInt =10;
		double myDouble =myInt;
		System.out.println("Int value:" +myInt);
		System.out.println("Double value:" +myDouble);

	}

}
1 b)package javaprogram;

//////////1 phase 1 project

public class ExplicitTypeCasting {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		double myDouble =10.5;
		int myInt =(int) myDouble;
		System.out.println("Double value:"+myDouble);
		System.out.println("Int value:"+myInt);
		

	}

}
================================================================
3) write a program to demostrate the while loop
package javaprogram;

public class Whileloop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
       int i=1;
       while(i<=20)
       {
    	   System.out.println(i);
    	   i++;
       }
       System.out.println("printed number are above");
	}

}
========================================================================
4)write a program to demonstrate the do while loop

package javaprogram;

public class DoWhileLoop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int i =1;
		do
		{
		System.out.println("today is the wednesday");
         i++;
	}while (i<=8);
		System.out.println("out of loop");

}
}
==============================================================
5)write a program to demonstrate the for loop

package javaprogram;

public class ForLoop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
		for(int i=1;i<=10;i++)
		{
			System.out.println("print the value :" + i);
			
		}
	System.out.println("out of the loop");
	}

}
==========================================================
2.write a program in java to verify the working of access modifiers

package java program;

public class AccessModifierDemo {
	
	//A class with different access modifier

	    // Public field - accessible from anywhere
	    public int publicVar = 10;

	    // Private field - accessible only within this class
	    private int privateVar = 20;

	    // Protected field - accessible within the same package and subclasses
	    protected int protectedVar = 30;

	    // Default (package-private) field - accessible within the same package
	    int defaultVar = 40;

	    // Public constructor
	    public AccessModifierDemo() {
	        System.out.println("Public constructor called");
	    }

	    // Private method - accessible only within this class
	    private void privateMethod() {
	        System.out.println("Private method called");
	    }

	    // Protected method - accessible within the same package and subclasses
	    protected void protectedMethod() {
	        System.out.println("Protected method called");
	    }

	    // Public method - accessible from anywhere
	    public void publicMethod() {
	        System.out.println("Public method called");
	    }

	    // Default (package-private) method - accessible within the same package
	    void defaultMethod() {
	        System.out.println("Default method called");
	    }

	    public static void main(String[] args) {
	        AccessModifierDemo obj = new AccessModifierDemo();

	        // Accessing fields and methods from within the same class
	        System.out.println("Public variable: " + obj.publicVar);
	        System.out.println("Private variable: " + obj.privateVar);
	        System.out.println("Protected variable: " + obj.protectedVar);
	        System.out.println("Default variable: " + obj.defaultVar);
	       obj.publicMethod();
	       obj.privateMethod();
	       obj.protectedMethod();
	       obj.defaultMethod();

	    
	 }
}
===========================================================================
6.demonstarte the classes,object and constructors

package inheritanceDemo;

public class MethodReturnValue {

	// Global variable : variables which are declared at class level.
	// these variables can be be used in any method of the class

	int x = 100;
	String str3 = "Java";

	public int sum()
	{
		// local variables : variables within a method
		// the scope of variables is only within this method
		// these variables cannot be used outside the methods
		int a =10;
		int b=20;
		int result = a+b+x;
		return result;   // returning integer value hence data type is int

	}

	public String concatmethod()
	{
		String str1 = "selenium";
		String str2 = "training";
		String result = str1+str2+str3;
		return result;
	}

	public void printmethod()
	{
		System.out.println("The global integer variable : " + x);
		System.out.println("The global String variable : " + str3);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		MethodReturnValue obj = new MethodReturnValue();

		System.out.println(obj.concatmethod());
		int value = obj.sum();

		System.out.println(value);


		obj.printmethod();



	}
}
===========================================================================

7.writing a program in java to verify implementation of collection

package collectionsDemo;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HashMapDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		HashMap<String, Integer> td = new HashMap<>();
		
		td.put("vaidehi", 12345);  
		td.put("vanac", 35345);
		td.put("John", 5345);
		td.put("chithra", 5345);
		td.put("James", 34535);
		
		Set set = td.entrySet();
		
		
		
		Iterator itr = set.iterator();
		while(itr.hasNext())
		{
		System.out.println(itr.next());
		}
		
		// remove methods
		
		td.remove("chithra"); // Remves the key marc and its value
	}}
		
		=========================================
package collectionsDemo;



import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

public class HashSetDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	
	HashSet<String> cities = new HashSet<>();
		
		cities.add("tamil nadu");
		cities.add("kerala");
		cities.add("New York");
		cities.add("New Delhi");
		cities.add("Moscow");
		cities.add("Mumbai");
		
		// print the items in the list
		for (String t: cities)
		{
			System.out.println(t);
		}

		
		System.out.println(cities.size());
		
	
		
		System.out.println(cities.contains("Hyderabad")); 
		
		Iterator itr = cities.iterator();
		
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
		
	}

}

=========================================================================
8.writing a program to perform try catch block 
package javaprogram;

///////phase1 project 8

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class TryCatchExample {
    public static void main(String[] args) {
        try {
            // Attempt to read a file that may not exist
            BufferedReader reader = new BufferedReader(new FileReader("nonexistent.txt"));
            String line = reader.readLine();
            System.out.println("First line of the file: " + line);
            reader.close();
        } catch (IOException e) {
            // Catch and handle the IOException
            System.out.println("An error occurred while reading the file: " + e.getMessage());
        }
    }
}
		


========================================================================
9.writing a code for a throw and throws keyword

package exceptionsPrograms;

public class ThrowDemo {
	
	
	public void div(int a , int b)
	{
		if (b==0)
		{
			throw new ArithmeticException();
		}
		else
		{
			int c = a/b;
			System.out.println(c);
			
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ThrowDemo t = new ThrowDemo();
		t.div(20, 0);  // it will throw an exception as division by 0 .
		
	}

}
===========================================================
package exceptionsPrograms;

public class ThrowsDemo {
	
	public void div(int a , int b) throws ArithmeticException
	{
		if (b==0)
		{
			throw new ArithmeticException();
		}
		else
		{
			int c = a/b;
			System.out.println(c);
			
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ThrowsDemo t = new ThrowsDemo();
		
		try {
			t.div(10, 0);
		}
		catch(Exception e){
			e.printStackTrace();
			System.out.println("Do not give b value as 0");
		}
		
		System.out.println("Execute the code1");
		System.out.println("Execute the code1");
	}

}


===========================================================================
writing code for a try block with parameters

package exceptionsPrograms;

public class Exceptionsdemo1 {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			int i = 9/0;
			System.out.println(i);
		}
		catch(ArithmeticException e) {
		
		System.out.println(e);
			
		System.out.println("you cannot divide by zero");
			// Different ways to print exception message:
			e.printStackTrace(); // will print exception, description and message and line number(stacktrace)
			System.out.println(e.toString()); // will print exception and description, - no stack trace
		System.out.println(e.getMessage()); // will print only message.
		
		}
		
		finally {
			System.out.println("I am in finally Block");
		}
		}	
		}	
		

=================================================

11.writing a program for multiple catch blocks

package exceptionsPrograms;

import java.util.InputMismatchException;
import java.util.Scanner;

public class MultipleCatch {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
  
		Scanner scan = new Scanner(System.in);
		
		try {
			System.out.println("Enter a number");
			int num1 = scan.nextInt();
			System.out.println("Enter another number");
			int num2 = scan.nextInt();
			
			int result = num1/num2;
			
			System.out.println("The division of 2 numbers is : " + result);
		}
		catch(ArithmeticException e) {
			System.out.println("Please do not enter a zero in denominator");
		}
		catch(InputMismatchException e) {
			System.out.println("Only Integer values are allowed");
		}
		catch(Exception e) {
			System.out.println("Please enter a valid input");
		}
	}
}

 


========================================================================
12.writing code for finally {}block

package exceptionsPrograms;

public class Exceptionsdemo1 {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			int i = 9/0;
			System.out.println(i);
		}
		catch(ArithmeticException e) {
		
		System.out.println(e);
			
		System.out.println("you cannot divide by zero");
			// Different ways to print exception message:
			e.printStackTrace(); // will print exception, description and message and line number(stacktrace)
			System.out.println(e.toString()); // will print exception and description, - no stack trace
		System.out.println(e.getMessage()); // will print only message.
		
		}
		
		finally {
			System.out.println("I am in finally Block");
		}
				
}}
============================================


7.demonistrate types of inheritances

package inheritanceDemo;

public class MethodDemo1 {

	public  void login()
	{
		System.out.println("enter user name");
		System.out.println("enter the password");
		System.out.println("login");
	}
	public void email()
	{
		System.out.println("enter the email:");
		

	}
	public void logout()
	{
		System.out.println("click logout buttton");
	}
	public static void main(String[]args)
	{
		MethodDemo1 obj =new MethodDemo1();
	    obj.login();
		obj.email();
		obj.logout();
	}
}

===============================

package inheritanceDemo;

public class MethodReturnValue {

	// Global variable : variables which are declared at class level.
	// these variables can be be used in any method of the class

	int x = 100;
	String str3 = "Java";

	public int sum()
	{
		// local variables : variables within a method
		// the scope of variables is only within this method
		// these variables cannot be used outside the methods
		int a =10;
		int b=20;
		int result = a+b+x;
		return result;   // returning integer value hence data type is int

	}

	public String concatmethod()
	{
		String str1 = "selenium";
		String str2 = "training";
		String result = str1+str2+str3;
		return result;
	}

	public void printmethod()
	{
		System.out.println("The global integer variable : " + x);
		System.out.println("The global String variable : " + str3);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		MethodReturnValue obj = new MethodReturnValue();

		System.out.println(obj.concatmethod());
		int value = obj.sum();

		System.out.println(value);


		obj.printmethod();



	}

}

================================

package inheritanceDemo;

public class ParameterDemo {

	public  void login(String username,String password)
	{
		System.out.println("enter user name :" +username);
		System.out.println("enter the password :" +password);
		System.out.println("login");
	}
	public void email(String text)
	{
		System.out.println("enter the email  :" +text);
		

	}
	public void logout()
	{
		System.out.println("click logout buttton");
	}
	public static void main(String[]args)
	{
		ParameterDemo obj =new ParameterDemo();
	    obj.login("vaidehi"," harry");
	    obj.email("vaidehi.com");
	    obj.logout();
	    }
}

================================

package inheritanceDemo;

public class Base {
	

	public void openbrowser(String browser) {

		System.out.println("Open the browser" + browser);
	}

	// Static: this method can be called without an Object in any class
	public static void login(String username,String password)
	{
		System.out.println("Enter Username: " + username);
		System.out.println("Enter Password: " + password);
		System.out.println("Sign into mailbox");
	}

	public void logut()
	{
		System.out.println("Click on logout button");
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
=======

package inheritanceDemo;

public class HomePage extends Base {
	
	// This is going to be child class
	
		public void Homepagetest()
		{
			System.out.println("Test for Home Page");
		}


		public static void main(String[] args) {
			// TODO Auto-generated method stub

			// Create object of child class

			HomePage obj = new HomePage();

			obj.openbrowser("Chrome");
			login("admin", "admin");
			obj.Homepagetest();
			obj.logut();


		}

	}
	

	


